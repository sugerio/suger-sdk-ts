/**
 * Suger API
 * CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.
 *
 * OpenAPI spec version: 1.0
 * Contact: support@suger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { StripeProductMarketingFeature } from '../models/StripeProductMarketingFeature';
import { StripeProductPackageDimensions } from '../models/StripeProductPackageDimensions';
import { HttpFile } from '../http/http';

export class StripeProduct {
    /**
    * Whether the product is currently available for purchase.
    */
    'active'?: boolean;
    /**
    * Time at which the object was created. Measured in seconds since the Unix epoch.
    */
    'created'?: number;
    /**
    * The product\'s description, meant to be displayable to the customer. Use this field to optionally store a long form explanation of the product being sold for your own rendering purposes.
    */
    'description'?: string;
    /**
    * Unique identifier for the product in Stripe.
    */
    'id'?: string;
    /**
    * A list of up to 8 URLs of images for this product, meant to be displayable to the customer.
    */
    'images'?: Array<string>;
    /**
    * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    */
    'livemode'?: boolean;
    /**
    * A list of up to 15 marketing features for this product. These are displayed in [pricing tables](https://stripe.com/docs/payments/checkout/pricing-table).
    */
    'marketingFeatures'?: Array<StripeProductMarketingFeature>;
    /**
    * Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    */
    'metadata'?: { [key: string]: string; };
    /**
    * The product\'s name, meant to be displayable to the customer.
    */
    'name'?: string;
    /**
    * String representing the object\'s type. Always has the value `product`.
    */
    'object'?: string;
    /**
    * The dimensions of this product for shipping purposes.
    */
    'packageDimensions'?: StripeProductPackageDimensions;
    /**
    * Whether this product is shipped (i.e., physical goods).
    */
    'shippable'?: boolean;
    /**
    * Extra information about a product which will appear on your customer\'s credit card statement. In the case that multiple products are billed at once, the first statement descriptor will be used.
    */
    'statementDescriptor'?: string;
    /**
    * A [tax code](https://stripe.com/docs/tax/tax-categories) ID.
    */
    'taxCode'?: any;
    /**
    * A label that represents units of this product. When set, this will be included in customers\' receipts, invoices, Checkout, and the customer portal.
    */
    'unitLabel'?: string;
    /**
    * Time at which the product was last updated. Measured in seconds since the Unix epoch.
    */
    'updated'?: number;
    /**
    * A URL of a publicly-accessible webpage for this product.
    */
    'url'?: string;

    static readonly discriminator: string | undefined = undefined;

    static readonly mapping: {[index: string]: string} | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "active",
            "baseName": "active",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "created",
            "baseName": "created",
            "type": "number",
            "format": ""
        },
        {
            "name": "description",
            "baseName": "description",
            "type": "string",
            "format": ""
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string",
            "format": ""
        },
        {
            "name": "images",
            "baseName": "images",
            "type": "Array<string>",
            "format": ""
        },
        {
            "name": "livemode",
            "baseName": "livemode",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "marketingFeatures",
            "baseName": "marketing_features",
            "type": "Array<StripeProductMarketingFeature>",
            "format": ""
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "{ [key: string]: string; }",
            "format": ""
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string",
            "format": ""
        },
        {
            "name": "object",
            "baseName": "object",
            "type": "string",
            "format": ""
        },
        {
            "name": "packageDimensions",
            "baseName": "package_dimensions",
            "type": "StripeProductPackageDimensions",
            "format": ""
        },
        {
            "name": "shippable",
            "baseName": "shippable",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "statementDescriptor",
            "baseName": "statement_descriptor",
            "type": "string",
            "format": ""
        },
        {
            "name": "taxCode",
            "baseName": "tax_code",
            "type": "any",
            "format": ""
        },
        {
            "name": "unitLabel",
            "baseName": "unit_label",
            "type": "string",
            "format": ""
        },
        {
            "name": "updated",
            "baseName": "updated",
            "type": "number",
            "format": ""
        },
        {
            "name": "url",
            "baseName": "url",
            "type": "string",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return StripeProduct.attributeTypeMap;
    }

    public constructor() {
    }
}
