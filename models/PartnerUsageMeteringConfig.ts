/**
 * Suger API
 * CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.
 *
 * OpenAPI spec version: 1.0
 * Contact: support@suger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Partner } from '../models/Partner';
import { UsageMeteringDimensionMappingValue } from '../models/UsageMeteringDimensionMappingValue';
import { HttpFile } from '../http/http';

export class PartnerUsageMeteringConfig {
    /**
    * Deprecated: Use DimensionMappingV2 instead. The mapping of the source dimension key to the destination dimension key of the usage metering.
    */
    'dimensionMapping'?: { [key: string]: UsageMeteringDimensionMappingValue; };
    /**
    * The mapping of the source dimension key to the destination dimension keys of the usage metering. The destination dimension keys are the list of the destination dimension keys. So the source dimension key can be mapped to multiple destination dimension keys.
    */
    'dimensionMappingV2'?: { [key: string]: Array<UsageMeteringDimensionMappingValue>; };
    'enableBillableDimension'?: boolean;
    /**
    * Enable the commit (discount) with additional usage metering at list price. Only applicable if EnableCommitWithAdditionalUsageMetering is true. The default is false, which means the commit with additional usage metering at the discounted price in the private offer. If set to true, the additional usage is metered at the list price (the price in public product listing) instead of the discounted price.
    */
    'enableCommitWithAdditionalUsageAtListPrice'?: boolean;
    /**
    * Enable the commit with additional usage metering. The default is false, which means all usage records are reported to partner no matter how much is the commit. If set to true, the usage records will be reported to partner only if the current commit has been exhausted.
    */
    'enableCommitWithAdditionalUsageMetering'?: boolean;
    /**
    * Enable the dimension mapping for the usage metering. The default is false, which means no dimension conversion and just use the origin dimension.
    */
    'enableDimensionMapping'?: boolean;
    /**
    * The partner in this dimension mapping. Required. Such as AWS, AZURE or GCP.
    */
    'partner'?: Partner;

    static readonly discriminator: string | undefined = undefined;

    static readonly mapping: {[index: string]: string} | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "dimensionMapping",
            "baseName": "dimensionMapping",
            "type": "{ [key: string]: UsageMeteringDimensionMappingValue; }",
            "format": ""
        },
        {
            "name": "dimensionMappingV2",
            "baseName": "dimensionMappingV2",
            "type": "{ [key: string]: Array<UsageMeteringDimensionMappingValue>; }",
            "format": ""
        },
        {
            "name": "enableBillableDimension",
            "baseName": "enableBillableDimension",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "enableCommitWithAdditionalUsageAtListPrice",
            "baseName": "enableCommitWithAdditionalUsageAtListPrice",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "enableCommitWithAdditionalUsageMetering",
            "baseName": "enableCommitWithAdditionalUsageMetering",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "enableDimensionMapping",
            "baseName": "enableDimensionMapping",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "partner",
            "baseName": "partner",
            "type": "Partner",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return PartnerUsageMeteringConfig.attributeTypeMap;
    }

    public constructor() {
    }
}


