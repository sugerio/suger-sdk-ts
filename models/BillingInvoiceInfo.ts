/**
 * Suger API
 * CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.
 *
 * OpenAPI spec version: 1.0
 * Contact: support@suger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { BillableDimensionPriceModelDetail } from '../models/BillableDimensionPriceModelDetail';
import { BillableDimensionUsageDailyRevenue } from '../models/BillableDimensionUsageDailyRevenue';
import { BillingAddonRecord } from '../models/BillingAddonRecord';
import { BillingPaymentInstallmentDetail } from '../models/BillingPaymentInstallmentDetail';
import { CommitRevenueDetail } from '../models/CommitRevenueDetail';
import { InvoiceAddFixedFee } from '../models/InvoiceAddFixedFee';
import { InvoiceAdjustDiscountByDimension } from '../models/InvoiceAdjustDiscountByDimension';
import { InvoiceAdjustMinimumSpendByDimension } from '../models/InvoiceAdjustMinimumSpendByDimension';
import { InvoiceAdjustOverallDiscount } from '../models/InvoiceAdjustOverallDiscount';
import { InvoiceAdjustOverallMinimumSpend } from '../models/InvoiceAdjustOverallMinimumSpend';
import { HttpFile } from '../http/http';

export class BillingInvoiceInfo {
    /**
    * Adjust charge fields The fixed fees to be added to the invoice.
    */
    'addFixedFees'?: Array<InvoiceAddFixedFee>;
    'addonDetail'?: BillingAddonRecord;
    /**
    * add or adjust discount for a specific dimension
    */
    'adjustDiscountByDimensions'?: Array<InvoiceAdjustDiscountByDimension>;
    /**
    * add or adjust minimum spend for a specific dimension
    */
    'adjustMinimumSpendByDimensions'?: Array<InvoiceAdjustMinimumSpendByDimension>;
    /**
    * add or adjust overall discount calculate each dimension\'s discount first, then apply the overall discount
    */
    'adjustOverallDiscount'?: InvoiceAdjustOverallDiscount;
    /**
    * add or adjust overall minimum spend calculate each dimension\'s minimum spend first, then apply the overall minimum spend
    */
    'adjustOverallMinimumSpend'?: InvoiceAdjustOverallMinimumSpend;
    'amount'?: number;
    'billableDimensionDetails'?: Array<BillableDimensionPriceModelDetail>;
    /**
    * Recurring flat fee for the invoice. There should be only one type fee for each invoice, commits, or usage.
    */
    'commitsRevenueDetails'?: Array<CommitRevenueDetail>;
    /**
    * The creation date of the invoice when the status of the invoice may be draft or issued. It may be different from the issue date.
    */
    'creationDate'?: Date;
    'currency'?: string;
    'description'?: string;
    /**
    * DueDate = IssueDate + NetTerm
    */
    'dueDate'?: Date;
    /**
    * Grace Period in number of days
    */
    'gracePeriodInDays'?: number;
    /**
    * IssueDate, issue invoice automatically when CreationDate + GracePeriod, or issue invoice manually IssueDate >= CreationDate && IssueDate <= CreationDate + GracePeriod
    */
    'issueDate'?: Date;
    'memo'?: string;
    /**
    * Net Terms period in number of days
    */
    'netTermsInDays'?: number;
    'paymentInstallmentsDetail'?: BillingPaymentInstallmentDetail;
    /**
    * Invoice receipt url, it only exists when there are transactions.
    */
    'receiptUrl'?: string;
    /**
    * SPA url with JWT.
    */
    'spaUrl'?: string;
    /**
    * Trial period in number of days
    */
    'trialPeriodInDays'?: number;
    /**
    * Billable dimension fees for the invoice.
    */
    'usageDailyRevenues'?: Array<BillableDimensionUsageDailyRevenue>;

    static readonly discriminator: string | undefined = undefined;

    static readonly mapping: {[index: string]: string} | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "addFixedFees",
            "baseName": "addFixedFees",
            "type": "Array<InvoiceAddFixedFee>",
            "format": ""
        },
        {
            "name": "addonDetail",
            "baseName": "addonDetail",
            "type": "BillingAddonRecord",
            "format": ""
        },
        {
            "name": "adjustDiscountByDimensions",
            "baseName": "adjustDiscountByDimensions",
            "type": "Array<InvoiceAdjustDiscountByDimension>",
            "format": ""
        },
        {
            "name": "adjustMinimumSpendByDimensions",
            "baseName": "adjustMinimumSpendByDimensions",
            "type": "Array<InvoiceAdjustMinimumSpendByDimension>",
            "format": ""
        },
        {
            "name": "adjustOverallDiscount",
            "baseName": "adjustOverallDiscount",
            "type": "InvoiceAdjustOverallDiscount",
            "format": ""
        },
        {
            "name": "adjustOverallMinimumSpend",
            "baseName": "adjustOverallMinimumSpend",
            "type": "InvoiceAdjustOverallMinimumSpend",
            "format": ""
        },
        {
            "name": "amount",
            "baseName": "amount",
            "type": "number",
            "format": ""
        },
        {
            "name": "billableDimensionDetails",
            "baseName": "billableDimensionDetails",
            "type": "Array<BillableDimensionPriceModelDetail>",
            "format": ""
        },
        {
            "name": "commitsRevenueDetails",
            "baseName": "commitsRevenueDetails",
            "type": "Array<CommitRevenueDetail>",
            "format": ""
        },
        {
            "name": "creationDate",
            "baseName": "creationDate",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "currency",
            "baseName": "currency",
            "type": "string",
            "format": ""
        },
        {
            "name": "description",
            "baseName": "description",
            "type": "string",
            "format": ""
        },
        {
            "name": "dueDate",
            "baseName": "dueDate",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "gracePeriodInDays",
            "baseName": "gracePeriodInDays",
            "type": "number",
            "format": ""
        },
        {
            "name": "issueDate",
            "baseName": "issueDate",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "memo",
            "baseName": "memo",
            "type": "string",
            "format": ""
        },
        {
            "name": "netTermsInDays",
            "baseName": "netTermsInDays",
            "type": "number",
            "format": ""
        },
        {
            "name": "paymentInstallmentsDetail",
            "baseName": "paymentInstallmentsDetail",
            "type": "BillingPaymentInstallmentDetail",
            "format": ""
        },
        {
            "name": "receiptUrl",
            "baseName": "receiptUrl",
            "type": "string",
            "format": ""
        },
        {
            "name": "spaUrl",
            "baseName": "spaUrl",
            "type": "string",
            "format": ""
        },
        {
            "name": "trialPeriodInDays",
            "baseName": "trialPeriodInDays",
            "type": "number",
            "format": ""
        },
        {
            "name": "usageDailyRevenues",
            "baseName": "usageDailyRevenues",
            "type": "Array<BillableDimensionUsageDailyRevenue>",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return BillingInvoiceInfo.attributeTypeMap;
    }

    public constructor() {
    }
}
