/**
 * Suger API
 * CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.
 *
 * OpenAPI spec version: 1.0
 * Contact: support@suger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { AzureIncludedBaseQuantity } from '../models/AzureIncludedBaseQuantity';
import { GcpPriceTier } from '../models/GcpPriceTier';
import { UsageCount } from '../models/UsageCount';
import { ValueType } from '../models/ValueType';
import { HttpFile } from '../http/http';

/**
* The dimension to meter usage in entitlement.
*/
export class MeteringDimension {
    'category'?: string;
    'description'?: string;
    /**
    * how many quantities of this dimension are included in the commit.
    */
    'includedBaseQuantities'?: Array<AzureIncludedBaseQuantity>;
    'key'?: string;
    /**
    * Display name of the dimension. For GCP Marketplace, it is the metering metric ID without plan prefix.
    */
    'name'?: string;
    /**
    * The plan ID of the metering dimension. Applicable to GCP Marketplace only. No ISO duration suffix.
    */
    'planId'?: string;
    /**
    * The name of the plan for the metering dimension. Applicable to GCP Marketplace only. It may contains the ISO duration suffix, such as P1Y.
    */
    'planName'?: string;
    /**
    * The price tiers of the metering dimension. Applicable to GCP Marketplace only.
    */
    'priceTiers'?: Array<GcpPriceTier>;
    /**
    * The unit price of this usage metering dimension.
    */
    'rate'?: number;
    /**
    * The SKU ID of the metering dimension. Applicable to GCP Marketplace only.
    */
    'skuId'?: string;
    'types'?: Array<string>;
    /**
    * The current Dimension Usage Count. Available when call GetEntitlement API.
    */
    'usageCount'?: UsageCount;
    /**
    * The value type of the metering dimension quantity. Applicable to GCP Marketplace only.
    */
    'valueType'?: ValueType;

    static readonly discriminator: string | undefined = undefined;

    static readonly mapping: {[index: string]: string} | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "category",
            "baseName": "category",
            "type": "string",
            "format": ""
        },
        {
            "name": "description",
            "baseName": "description",
            "type": "string",
            "format": ""
        },
        {
            "name": "includedBaseQuantities",
            "baseName": "includedBaseQuantities",
            "type": "Array<AzureIncludedBaseQuantity>",
            "format": ""
        },
        {
            "name": "key",
            "baseName": "key",
            "type": "string",
            "format": ""
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string",
            "format": ""
        },
        {
            "name": "planId",
            "baseName": "planId",
            "type": "string",
            "format": ""
        },
        {
            "name": "planName",
            "baseName": "planName",
            "type": "string",
            "format": ""
        },
        {
            "name": "priceTiers",
            "baseName": "priceTiers",
            "type": "Array<GcpPriceTier>",
            "format": ""
        },
        {
            "name": "rate",
            "baseName": "rate",
            "type": "number",
            "format": ""
        },
        {
            "name": "skuId",
            "baseName": "skuId",
            "type": "string",
            "format": ""
        },
        {
            "name": "types",
            "baseName": "types",
            "type": "Array<string>",
            "format": ""
        },
        {
            "name": "usageCount",
            "baseName": "usageCount",
            "type": "UsageCount",
            "format": ""
        },
        {
            "name": "valueType",
            "baseName": "valueType",
            "type": "ValueType",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return MeteringDimension.attributeTypeMap;
    }

    public constructor() {
    }
}


