/**
 * Suger API
 * CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.
 *
 * OpenAPI spec version: 1.0
 * Contact: support@suger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { AdyenBuyer } from '../models/AdyenBuyer';
import { AwsAccountIdentifier } from '../models/AwsAccountIdentifier';
import { AzureADIdentifier } from '../models/AzureADIdentifier';
import { CompanyInfo } from '../models/CompanyInfo';
import { GcpMarketplaceUserAccount } from '../models/GcpMarketplaceUserAccount';
import { PaymentConfig } from '../models/PaymentConfig';
import { StripeCustomer } from '../models/StripeCustomer';
import { HttpFile } from '../http/http';

export class BuyerInfo {
    /**
    * Buyer on Adyen
    */
    'adyenBuyer'?: AdyenBuyer;
    /**
    * Buyer from AWS Marketplace
    */
    'awsBuyer'?: AwsAccountIdentifier;
    /**
    * Buyer from Azure Marketplace
    */
    'azureBuyer'?: AzureADIdentifier;
    /**
    * The amount that the seller can collect. It excludes the marketplace commision fee.
    */
    'collectableAmount'?: number;
    'companyInfo'?: CompanyInfo;
    /**
    * customerID of buyer on seller\'s side
    */
    'customerId'?: string;
    /**
    * The amount that has been disbursed to the seller account.
    */
    'disbursedAmount'?: number;
    /**
    * The email address of the buyer. This was copied from the new client signup form.
    */
    'emailAddress'?: string;
    /**
    * Fields to store key-value pairs of buyer information.
    */
    'fields'?: { [key: string]: any; };
    /**
    * Buyer from GCP Marketplace
    */
    'gcpBuyer'?: GcpMarketplaceUserAccount;
    /**
    * The gross amount that the buyer has committed to pay, including usage metered amount.
    */
    'grossAmount'?: number;
    /**
    * The amount that the buyer has got invoiced.
    */
    'invoicedAmount'?: number;
    /**
    * The lgo customer ID for the buyer if it is connected to a lago customer.
    */
    'lagoCustomerId'?: string;
    /**
    * Last modifier user ID.
    */
    'lastModifiedBy'?: string;
    /**
    * The metronome customer ID for the buyer if it is connected to a metronome customer.
    */
    'metronomeCustomerId'?: string;
    /**
    * The orb customer ID for the buyer if it is connected to a orb customer.
    */
    'orbCustomerId'?: string;
    /**
    * Payment Config for billing.
    */
    'paymentConfig'?: PaymentConfig;
    /**
    * Buyer SPA url, public page visited with jwt.
    */
    'spaUrl'?: string;
    /**
    * Buyer as Customer on Stripe
    */
    'stripeBuyer'?: StripeCustomer;

    static readonly discriminator: string | undefined = undefined;

    static readonly mapping: {[index: string]: string} | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "adyenBuyer",
            "baseName": "adyenBuyer",
            "type": "AdyenBuyer",
            "format": ""
        },
        {
            "name": "awsBuyer",
            "baseName": "awsBuyer",
            "type": "AwsAccountIdentifier",
            "format": ""
        },
        {
            "name": "azureBuyer",
            "baseName": "azureBuyer",
            "type": "AzureADIdentifier",
            "format": ""
        },
        {
            "name": "collectableAmount",
            "baseName": "collectableAmount",
            "type": "number",
            "format": ""
        },
        {
            "name": "companyInfo",
            "baseName": "companyInfo",
            "type": "CompanyInfo",
            "format": ""
        },
        {
            "name": "customerId",
            "baseName": "customerId",
            "type": "string",
            "format": ""
        },
        {
            "name": "disbursedAmount",
            "baseName": "disbursedAmount",
            "type": "number",
            "format": ""
        },
        {
            "name": "emailAddress",
            "baseName": "emailAddress",
            "type": "string",
            "format": ""
        },
        {
            "name": "fields",
            "baseName": "fields",
            "type": "{ [key: string]: any; }",
            "format": ""
        },
        {
            "name": "gcpBuyer",
            "baseName": "gcpBuyer",
            "type": "GcpMarketplaceUserAccount",
            "format": ""
        },
        {
            "name": "grossAmount",
            "baseName": "grossAmount",
            "type": "number",
            "format": ""
        },
        {
            "name": "invoicedAmount",
            "baseName": "invoicedAmount",
            "type": "number",
            "format": ""
        },
        {
            "name": "lagoCustomerId",
            "baseName": "lagoCustomerId",
            "type": "string",
            "format": ""
        },
        {
            "name": "lastModifiedBy",
            "baseName": "lastModifiedBy",
            "type": "string",
            "format": ""
        },
        {
            "name": "metronomeCustomerId",
            "baseName": "metronomeCustomerId",
            "type": "string",
            "format": ""
        },
        {
            "name": "orbCustomerId",
            "baseName": "orbCustomerId",
            "type": "string",
            "format": ""
        },
        {
            "name": "paymentConfig",
            "baseName": "paymentConfig",
            "type": "PaymentConfig",
            "format": ""
        },
        {
            "name": "spaUrl",
            "baseName": "spaUrl",
            "type": "string",
            "format": ""
        },
        {
            "name": "stripeBuyer",
            "baseName": "stripeBuyer",
            "type": "StripeCustomer",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return BuyerInfo.attributeTypeMap;
    }

    public constructor() {
    }
}
