/**
 * Suger API
 * CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.
 *
 * OpenAPI spec version: 1.0
 * Contact: support@suger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { HttpFile } from '../http/http';

export class GcpUserInfo {
    /**
    * a list of unique order IDs for each entitlement ID that indicates the different offers on the same product. This field is available only if multiple orders of the same product is enabled
    */
    'orders'?: Array<string>;
    /**
    * An array of strings representing the user\'s roles. Right now, it can be either: ** account_admin, which indicates that the user is a Billing Account Administrator of the billing account that purchased the product, or ** project_editor, which indicates that the user is a Project Editor, but not a Billing Administrator, of the project under that billing account.
    */
    'roles'?: Array<string>;
    /**
    * The user\'s obfuscated GAIA ID, which can be used to initiate Open ID Connect.
    */
    'userIdentity'?: string;

    static readonly discriminator: string | undefined = undefined;

    static readonly mapping: {[index: string]: string} | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "orders",
            "baseName": "orders",
            "type": "Array<string>",
            "format": ""
        },
        {
            "name": "roles",
            "baseName": "roles",
            "type": "Array<string>",
            "format": ""
        },
        {
            "name": "userIdentity",
            "baseName": "user_identity",
            "type": "string",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return GcpUserInfo.attributeTypeMap;
    }

    public constructor() {
    }
}
