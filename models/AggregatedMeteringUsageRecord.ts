/**
 * Suger API
 * CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.
 *
 * OpenAPI spec version: 1.0
 * Contact: support@suger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { BillableMetricAggregationType } from '../models/BillableMetricAggregationType';
import { BillableMetricInfo } from '../models/BillableMetricInfo';
import { UniqueCountAggregationResult } from '../models/UniqueCountAggregationResult';
import { HttpFile } from '../http/http';

export class AggregatedMeteringUsageRecord {
    /**
    * Amount calculated by billable dimension\'s price model, this is only used for report billable usage records to marketplace.
    */
    'amount'?: number;
    'billableMetricAggregationType'?: BillableMetricAggregationType;
    'billableMetricInfo'?: BillableMetricInfo;
    /**
    * GroupBysExpression is the string expression of array of group bys.
    */
    'groupBysExpression'?: string;
    /**
    * Key is the unique identifier of a billable metric.
    */
    'key'?: string;
    /**
    * Name is the name of a billable metric. Optional, it is only for display purpose.
    */
    'name'?: string;
    /**
    * Value is the value of a billable metric.
    */
    'quantity'?: number;
    /**
    * Unique count metric aggregate result.
    */
    'uniqueCountAggregationResult'?: UniqueCountAggregationResult;

    static readonly discriminator: string | undefined = undefined;

    static readonly mapping: {[index: string]: string} | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "amount",
            "baseName": "amount",
            "type": "number",
            "format": ""
        },
        {
            "name": "billableMetricAggregationType",
            "baseName": "billableMetricAggregationType",
            "type": "BillableMetricAggregationType",
            "format": ""
        },
        {
            "name": "billableMetricInfo",
            "baseName": "billableMetricInfo",
            "type": "BillableMetricInfo",
            "format": ""
        },
        {
            "name": "groupBysExpression",
            "baseName": "groupBysExpression",
            "type": "string",
            "format": ""
        },
        {
            "name": "key",
            "baseName": "key",
            "type": "string",
            "format": ""
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string",
            "format": ""
        },
        {
            "name": "quantity",
            "baseName": "quantity",
            "type": "number",
            "format": ""
        },
        {
            "name": "uniqueCountAggregationResult",
            "baseName": "uniqueCountAggregationResult",
            "type": "UniqueCountAggregationResult",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return AggregatedMeteringUsageRecord.attributeTypeMap;
    }

    public constructor() {
    }
}


