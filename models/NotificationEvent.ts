/**
 * Suger API
 * CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.
 *
 * OpenAPI spec version: 1.0
 * Contact: support@suger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { AuditingEventPriority } from '../models/AuditingEventPriority';
import { EntityType } from '../models/EntityType';
import { LastModifiedBy } from '../models/LastModifiedBy';
import { NotificationChannel } from '../models/NotificationChannel';
import { NotificationEventAction } from '../models/NotificationEventAction';
import { NotificationEventStatus } from '../models/NotificationEventStatus';
import { Partner } from '../models/Partner';
import { TrackEvent } from '../models/TrackEvent';
import { HttpFile } from '../http/http';

export class NotificationEvent {
    'action'?: NotificationEventAction;
    /**
    * Cc contactIds that will receive this notification
    */
    'ccContactIds'?: Array<string>;
    /**
    * The list of channels this event will be sent to, e.g., [\"SLACK\", \"EMAIL\"]
    */
    'channels'?: Array<NotificationChannel>;
    /**
    * Contact emails that will receive this notification
    */
    'contactEmails'?: Array<string>;
    /**
    * ContactIds that will receive this notification
    */
    'contactIds'?: Array<string>;
    /**
    * Who originally created or triggered this notification event. It can be user or API client.
    */
    'createdBy'?: LastModifiedBy;
    /**
    * Custom fields of the notification event.
    */
    'customFields'?: { [key: string]: any; };
    'entityID'?: string;
    /**
    * The name of the entity.
    */
    'entityName'?: string;
    'entityStatus'?: string;
    'entityType'?: EntityType;
    /**
    * notification event id.
    */
    'eventID'?: string;
    /**
    * notification event status.
    */
    'eventStatus'?: NotificationEventStatus;
    /**
    * Additional info of the notification event.
    */
    'info'?: any;
    /**
    * If this notification event is an action item.
    */
    'isActionItem'?: boolean;
    /**
    * timestamp of the event when it is updated.
    */
    'lastUpdateTime'?: Date;
    /**
    * The message of the notification event such as email body, action item description.
    */
    'message'?: string;
    /**
    * suger organization id.
    */
    'organizationID'?: string;
    /**
    * the partner of the entity. Optional.
    */
    'partner'?: Partner;
    /**
    * The priority of the notification event.
    */
    'priority'?: AuditingEventPriority;
    /**
    * If this notification event is an auditing event and need to store in DB.
    */
    'requireAudit'?: boolean;
    /**
    * timestamp of the event when it is scheduled or created.
    */
    'timestamp'?: Date;
    /**
    * The title of the notification event such as email subject, action item title.
    */
    'title'?: string;
    /**
    * The track events of the notification event.
    */
    'trackEvents'?: Array<TrackEvent>;

    static readonly discriminator: string | undefined = undefined;

    static readonly mapping: {[index: string]: string} | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "action",
            "baseName": "action",
            "type": "NotificationEventAction",
            "format": ""
        },
        {
            "name": "ccContactIds",
            "baseName": "ccContactIds",
            "type": "Array<string>",
            "format": ""
        },
        {
            "name": "channels",
            "baseName": "channels",
            "type": "Array<NotificationChannel>",
            "format": ""
        },
        {
            "name": "contactEmails",
            "baseName": "contactEmails",
            "type": "Array<string>",
            "format": ""
        },
        {
            "name": "contactIds",
            "baseName": "contactIds",
            "type": "Array<string>",
            "format": ""
        },
        {
            "name": "createdBy",
            "baseName": "createdBy",
            "type": "LastModifiedBy",
            "format": ""
        },
        {
            "name": "customFields",
            "baseName": "customFields",
            "type": "{ [key: string]: any; }",
            "format": ""
        },
        {
            "name": "entityID",
            "baseName": "entityID",
            "type": "string",
            "format": ""
        },
        {
            "name": "entityName",
            "baseName": "entityName",
            "type": "string",
            "format": ""
        },
        {
            "name": "entityStatus",
            "baseName": "entityStatus",
            "type": "string",
            "format": ""
        },
        {
            "name": "entityType",
            "baseName": "entityType",
            "type": "EntityType",
            "format": ""
        },
        {
            "name": "eventID",
            "baseName": "eventID",
            "type": "string",
            "format": ""
        },
        {
            "name": "eventStatus",
            "baseName": "eventStatus",
            "type": "NotificationEventStatus",
            "format": ""
        },
        {
            "name": "info",
            "baseName": "info",
            "type": "any",
            "format": ""
        },
        {
            "name": "isActionItem",
            "baseName": "isActionItem",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "lastUpdateTime",
            "baseName": "lastUpdateTime",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "message",
            "baseName": "message",
            "type": "string",
            "format": ""
        },
        {
            "name": "organizationID",
            "baseName": "organizationID",
            "type": "string",
            "format": ""
        },
        {
            "name": "partner",
            "baseName": "partner",
            "type": "Partner",
            "format": ""
        },
        {
            "name": "priority",
            "baseName": "priority",
            "type": "AuditingEventPriority",
            "format": ""
        },
        {
            "name": "requireAudit",
            "baseName": "requireAudit",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "timestamp",
            "baseName": "timestamp",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "title",
            "baseName": "title",
            "type": "string",
            "format": ""
        },
        {
            "name": "trackEvents",
            "baseName": "trackEvents",
            "type": "Array<TrackEvent>",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return NotificationEvent.attributeTypeMap;
    }

    public constructor() {
    }
}


