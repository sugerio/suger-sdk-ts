/**
 * Suger API
 * CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.
 *
 * OpenAPI spec version: 1.0
 * Contact: support@suger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { EntitlementTermType } from '../models/EntitlementTermType';
import { HttpFile } from '../http/http';

export class EntitlementTermInfo {
    /**
    * The decimal part of the dimension quantity, in format of <dimensionKey, decimalPart> It is used to save the decimal part of the dimension quantity for AWS Marketplace only. Because AWS Marketplace only accepts integer for dimension quantity. If the dimension quantity is a decimal number, we need to save the decimal part for future use.
    */
    'dimensionQuantityDecimalParts'?: { [key: string]: number; };
    /**
    * Whether the commit is divided into multiple sub entitlement terms. If true, it has subEntitlementTermIds.
    */
    'isCommitDivided'?: boolean;
    /**
    * The partner\'s entitlement term ID. It stands for the partner\'s entitlement term. Applicable to the sub entitlement term only.
    */
    'parentEntitlementTermId'?: string;
    /**
    * All sub entitlement terms id of this entitlement term if it is commit divided.
    */
    'subEntitlementTermIds'?: Array<string>;
    'type'?: EntitlementTermType;

    static readonly discriminator: string | undefined = undefined;

    static readonly mapping: {[index: string]: string} | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "dimensionQuantityDecimalParts",
            "baseName": "dimensionQuantityDecimalParts",
            "type": "{ [key: string]: number; }",
            "format": ""
        },
        {
            "name": "isCommitDivided",
            "baseName": "isCommitDivided",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "parentEntitlementTermId",
            "baseName": "parentEntitlementTermId",
            "type": "string",
            "format": ""
        },
        {
            "name": "subEntitlementTermIds",
            "baseName": "subEntitlementTermIds",
            "type": "Array<string>",
            "format": ""
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "EntitlementTermType",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return EntitlementTermInfo.attributeTypeMap;
    }

    public constructor() {
    }
}


