/**
 * Suger API
 * CRUD operations on a set of resources, including organizations, products, offers, entitlements, usage record groups for meterting, etc.
 *
 * OpenAPI spec version: 1.0
 * Contact: support@suger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { AwsChannelPartner } from '../models/AwsChannelPartner';
import { AwsMarketplaceAgreementV2 } from '../models/AwsMarketplaceAgreementV2';
import { AzureMarketplaceSubscription } from '../models/AzureMarketplaceSubscription';
import { BillableDimension } from '../models/BillableDimension';
import { BillingAddonRecord } from '../models/BillingAddonRecord';
import { BillingCycle } from '../models/BillingCycle';
import { ClientDescribeInstanceResponseBody } from '../models/ClientDescribeInstanceResponseBody';
import { ClientDescribeOrderResponseBody } from '../models/ClientDescribeOrderResponseBody';
import { CommitDimension } from '../models/CommitDimension';
import { EulaType } from '../models/EulaType';
import { GcpMarketplaceEntitlement } from '../models/GcpMarketplaceEntitlement';
import { GcpMarketplaceProductPurchaseOptionSpec } from '../models/GcpMarketplaceProductPurchaseOptionSpec';
import { MeteringDimension } from '../models/MeteringDimension';
import { PaymentInstallment } from '../models/PaymentInstallment';
import { PaymentScheduleType } from '../models/PaymentScheduleType';
import { SnowflakeMarketplaceOffer } from '../models/SnowflakeMarketplaceOffer';
import { TrialConfig } from '../models/TrialConfig';
import { TypesEntitlement } from '../models/TypesEntitlement';
import { HttpFile } from '../http/http';

export class EntitlementInfo {
    /**
    * The addons for the entitlement.
    */
    'addons'?: Array<BillingAddonRecord>;
    /**
    * Alert days before the end of the entitlement
    */
    'alertDaysBeforeEnd'?: number;
    /**
    * Nullable. Alibaba Entitlements from Alibaba Marketplace.
    */
    'alibabaEntitlements'?: Array<ClientDescribeInstanceResponseBody>;
    /**
    * Nullable. Alibaba Orders from Alibaba Marketplace.
    */
    'alibabaOrders'?: Array<ClientDescribeOrderResponseBody>;
    /**
    * Is this Entitlement Auto Renew enabled.
    */
    'autoRenew'?: boolean;
    /**
    * Nullable. AWS agreement from AWS Marketplace.
    */
    'awsAgreement'?: AwsMarketplaceAgreementV2;
    /**
    * The AWS channel partner (reseller), only applicable if this entitlement is based on AWS CPPO offer.
    */
    'awsChannelPartner'?: AwsChannelPartner;
    /**
    * Nullable. AWS Entitlements from AWS Marketplace.
    */
    'awsEntitlements'?: Array<TypesEntitlement>;
    /**
    * Nullable. Azure Subscriptions from Azure Marketplace.
    */
    'azureSubscriptions'?: Array<AzureMarketplaceSubscription>;
    /**
    * The dimensions for billable metric usage-based metering. It\'s for Suger(Stripe, Ayden) metering.
    */
    'billableDimensions'?: Array<BillableDimension>;
    /**
    * Billing Cycle
    */
    'billingCycle'?: BillingCycle;
    /**
    * The billing interval from the offer.
    */
    'billingIntervalInMonths'?: number;
    /**
    * The buyer\'s management URL in the cloud marketplace. For different cloud marketplaces, the buyer management URL maybe different.
    */
    'buyerManagementURL'?: string;
    /**
    * The amount that the seller can collect. It excludes the marketplace commision fee.
    */
    'collectableAmount'?: number;
    /**
    * The amount that the buyer has committed to pay. It can be the sum of payment installments if applicable.
    */
    'commitAmount'?: number;
    /**
    * The dimensions for flatrate commitment (recurring or one-time).
    */
    'commits'?: Array<CommitDimension>;
    /**
    * The default Currency is USD.
    */
    'currency'?: string;
    /**
    * The dimensions for usage-based metering. It\'s for usage metering in cloud marketplaces. The max size of dimensions is 50. The oversized dimensions won\'t be saved in the EntitlementInfo. But the dimensions can be accessed from the connected offer info or product info.
    */
    'dimensions'?: Array<MeteringDimension>;
    /**
    * Whether the upper metering dimensions are oversized (exceed the max size 50).
    */
    'dimensionsOversized'?: boolean;
    /**
    * The amount that has been disbursed to the seller account.
    */
    'disbursedAmount'?: number;
    'eulaType'?: EulaType;
    'eulaUrl'?: string;
    /**
    * Nullable. GCP Entitlements from GCP Marketplace.
    */
    'gcpEntitlements'?: Array<GcpMarketplaceEntitlement>;
    /**
    * Only applicable for GCP Marketplace Entitlements.
    */
    'gcpPlans'?: Array<GcpMarketplaceProductPurchaseOptionSpec>;
    /**
    * The grace period for the offer. It is same as the TrialConfig in DirectOfferInfo. But can be overridden at the entitlement level.
    */
    'gracePeriodInDays'?: number;
    /**
    * The gross amount that the buyer has committed to pay, including usage metered amount.
    */
    'grossAmount'?: number;
    /**
    * The amount that the buyer has got invoiced.
    */
    'invoicedAmount'?: number;
    /**
    * Whether the usage metering will be charged for the amount that exceeds the committed amount from the offer.
    */
    'isMeteringOverageCommit'?: boolean;
    /**
    * The net terms for the offer. It is same as the TrialConfig in DirectOfferInfo. But can be overridden at the entitlement level.
    */
    'netTermsInDays'?: number;
    /**
    * For flexible payment schedules
    */
    'paymentInstallments'?: Array<PaymentInstallment>;
    /**
    * The payment schedule for the entitlement. PREPAY means the buyer pays before the service is provided. POSTPAY means the buyer pays after the service is provided.
    */
    'paymentSchedule'?: PaymentScheduleType;
    'refundCancellationPolicy'?: string;
    'sellerNotes'?: string;
    /**
    * Snowfalke offer info
    */
    'snowflakeOffer'?: SnowflakeMarketplaceOffer;
    /**
    * The URL with JWT as auth method for the entitlement SPA. It can be shared with the buyer to access the SPA without login.
    */
    'spaUrl'?: string;
    /**
    * The trial configuration for the offer. It is same as the TrialConfig in DirectOfferInfo. But can be overridden at the entitlement level.
    */
    'trialConfig'?: TrialConfig;

    static readonly discriminator: string | undefined = undefined;

    static readonly mapping: {[index: string]: string} | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "addons",
            "baseName": "addons",
            "type": "Array<BillingAddonRecord>",
            "format": ""
        },
        {
            "name": "alertDaysBeforeEnd",
            "baseName": "alertDaysBeforeEnd",
            "type": "number",
            "format": ""
        },
        {
            "name": "alibabaEntitlements",
            "baseName": "alibabaEntitlements",
            "type": "Array<ClientDescribeInstanceResponseBody>",
            "format": ""
        },
        {
            "name": "alibabaOrders",
            "baseName": "alibabaOrders",
            "type": "Array<ClientDescribeOrderResponseBody>",
            "format": ""
        },
        {
            "name": "autoRenew",
            "baseName": "autoRenew",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "awsAgreement",
            "baseName": "awsAgreement",
            "type": "AwsMarketplaceAgreementV2",
            "format": ""
        },
        {
            "name": "awsChannelPartner",
            "baseName": "awsChannelPartner",
            "type": "AwsChannelPartner",
            "format": ""
        },
        {
            "name": "awsEntitlements",
            "baseName": "awsEntitlements",
            "type": "Array<TypesEntitlement>",
            "format": ""
        },
        {
            "name": "azureSubscriptions",
            "baseName": "azureSubscriptions",
            "type": "Array<AzureMarketplaceSubscription>",
            "format": ""
        },
        {
            "name": "billableDimensions",
            "baseName": "billableDimensions",
            "type": "Array<BillableDimension>",
            "format": ""
        },
        {
            "name": "billingCycle",
            "baseName": "billingCycle",
            "type": "BillingCycle",
            "format": ""
        },
        {
            "name": "billingIntervalInMonths",
            "baseName": "billingIntervalInMonths",
            "type": "number",
            "format": ""
        },
        {
            "name": "buyerManagementURL",
            "baseName": "buyerManagementURL",
            "type": "string",
            "format": ""
        },
        {
            "name": "collectableAmount",
            "baseName": "collectableAmount",
            "type": "number",
            "format": ""
        },
        {
            "name": "commitAmount",
            "baseName": "commitAmount",
            "type": "number",
            "format": ""
        },
        {
            "name": "commits",
            "baseName": "commits",
            "type": "Array<CommitDimension>",
            "format": ""
        },
        {
            "name": "currency",
            "baseName": "currency",
            "type": "string",
            "format": ""
        },
        {
            "name": "dimensions",
            "baseName": "dimensions",
            "type": "Array<MeteringDimension>",
            "format": ""
        },
        {
            "name": "dimensionsOversized",
            "baseName": "dimensionsOversized",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "disbursedAmount",
            "baseName": "disbursedAmount",
            "type": "number",
            "format": ""
        },
        {
            "name": "eulaType",
            "baseName": "eulaType",
            "type": "EulaType",
            "format": ""
        },
        {
            "name": "eulaUrl",
            "baseName": "eulaUrl",
            "type": "string",
            "format": ""
        },
        {
            "name": "gcpEntitlements",
            "baseName": "gcpEntitlements",
            "type": "Array<GcpMarketplaceEntitlement>",
            "format": ""
        },
        {
            "name": "gcpPlans",
            "baseName": "gcpPlans",
            "type": "Array<GcpMarketplaceProductPurchaseOptionSpec>",
            "format": ""
        },
        {
            "name": "gracePeriodInDays",
            "baseName": "gracePeriodInDays",
            "type": "number",
            "format": ""
        },
        {
            "name": "grossAmount",
            "baseName": "grossAmount",
            "type": "number",
            "format": ""
        },
        {
            "name": "invoicedAmount",
            "baseName": "invoicedAmount",
            "type": "number",
            "format": ""
        },
        {
            "name": "isMeteringOverageCommit",
            "baseName": "isMeteringOverageCommit",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "netTermsInDays",
            "baseName": "netTermsInDays",
            "type": "number",
            "format": ""
        },
        {
            "name": "paymentInstallments",
            "baseName": "paymentInstallments",
            "type": "Array<PaymentInstallment>",
            "format": ""
        },
        {
            "name": "paymentSchedule",
            "baseName": "paymentSchedule",
            "type": "PaymentScheduleType",
            "format": ""
        },
        {
            "name": "refundCancellationPolicy",
            "baseName": "refundCancellationPolicy",
            "type": "string",
            "format": ""
        },
        {
            "name": "sellerNotes",
            "baseName": "sellerNotes",
            "type": "string",
            "format": ""
        },
        {
            "name": "snowflakeOffer",
            "baseName": "snowflakeOffer",
            "type": "SnowflakeMarketplaceOffer",
            "format": ""
        },
        {
            "name": "spaUrl",
            "baseName": "spaUrl",
            "type": "string",
            "format": ""
        },
        {
            "name": "trialConfig",
            "baseName": "trialConfig",
            "type": "TrialConfig",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return EntitlementInfo.attributeTypeMap;
    }

    public constructor() {
    }
}


